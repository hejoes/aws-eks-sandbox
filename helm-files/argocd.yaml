server:
  podLabels:
    component: argocd-server

  autoscaling:
    enabled: true
    minReplicas: 2  
  config:
    server.rbac.log.enforce.enable: "true"
    admin.enabled: "false"
    exec.enabled: "true"
    url: https://argocd.${domain}
    dex.config: |
      logger:
        level: debug
        format: json
      connectors:
        - type: saml
          id: sso
          name: AWS-SSO
          config:
            ssoURL: ${argocd_ssourl}
            ssoIssuer: ${argocd_ssoissuer}
            caData: ${argocd_cadata}
            redirectURI: https://argocd.${domain}/api/dex/callback
            usernameAttr: name
            emailAttr: email
            groupsAttr: groups
            nameIDPolicyFormat: emailAddress
    resource.exclusions: |
      - apiGroups:
        - "velero.io"
        kinds:
        - Backup
        clusters:
        - "*"
  rbacConfig:
      policy.csv: |
        g, 50cc99cc-c071-70e7-520a-4c91445b5d18, role:admin
        g, b03c99ac-1031-70b0-195b-4a98be752025, role:admin
        g, 70dcb92c-f091-7081-f5b0-f06dcc1a1cd2, role:readonly
        g, 70dcb92c-f091-7081-f5b0-f06dcc1a1cd2, role:manage-applications
        p, role:admin, applications, create, */*, allow
        p, role:admin, applications, update, */*, allow
        p, role:admin, applications, sync, */*, allow
        p, role:admin, applications, override, */*, allow
        p, role:admin, applications, action/*, */*, allow
        p, role:admin, applications, action/*, infra/*, allow
        p, role:admin, applicationsets, get, */*, allow
        p, role:admin, applicationsets, create, */*, allow
        p, role:admin, applicationsets, update, */*, allow
        p, role:admin, certificates, create, *, allow
        p, role:admin, certificates, update, *, allow
        p, role:admin, certificates, delete, *, allow
        p, role:admin, clusters, create, *, allow
        p, role:admin, clusters, update, *, allow
        p, role:admin, clusters, delete, *, allow
        p, role:admin, repositories, create, *, allow
        p, role:admin, repositories, update, *, allow
        p, role:admin, repositories, delete, *, allow
        p, role:admin, projects, create, *, allow
        p, role:admin, projects, update, *, allow
        p, role:admin, projects, delete, *, allow
        p, role:admin, accounts, update, *, allow
        p, role:admin, gpgkeys, create, *, allow
        p, role:admin, gpgkeys, delete, *, allow
        p, role:admin, exec, create, */*, allow
        p, role:admin, logs, get, */*, allow
        p, role:readonly, logs, get, */*, allow
        p, role:manage-applications, applications, update, */*, allow
        p, role:manage-applications, applications, sync, */*, allow
        p, role:manage-applications, logs, get, */*, allow
  ingress:
    enabled: true
    annotations: 
      alb.ingress.kubernetes.io/backend-protocol: HTTPS
      alb.ingress.kubernetes.io/listen-ports: '[{"HTTPS":443}]'
      alb.ingress.kubernetes.io/group.name: internal
      alb.ingress.kubernetes.io/scheme: internal
      alb.ingress.kubernetes.io/target-type: ip
      alb.ingress.kubernetes.io/tags: "map-migrated=mig35627"
    labels:
      component: ingress

    ingressClassName: "alb"
    hosts:
    - argocd.${domain}
    paths:
    - /
  ingressGrpc:
    enabled: true
    isAWSALB: true
    ingressClassName: "alb"
    annotations: 
      alb.ingress.kubernetes.io/group.name: external
      alb.ingress.kubernetes.io/scheme: external
      alb.ingress.kubernetes.io/target-type: ip
      kubernetes.io/ingress.class: alb
    
